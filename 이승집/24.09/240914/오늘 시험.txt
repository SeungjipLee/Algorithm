1. strs안에는 여러 문자열이 담겨있다.
그 중 2개를 뽑아서 x를 완성하는 것을 목표로 한다.
뽑은 2개 중하나를 a 다른 하나를 b라고 하자.
s <= e 인 2개의 숫자는 a, b의 인덱스이다.
a의 s부터 e번째 인덱스를 b의 s부터 e번쨰 인덱스로 교체하여 문자열을 만든다.

a = "abcde", b = "apple", x = "apcde"라고 할 때
s = 1, e = 2
s = 1, e = 1
2개의 방법이 존재한다.

물론 a와 b가 바뀌면 방법의 수도 달라진다.
총 x를 완성할 수 있는 방법의 수를 구하시오.

[TestCase1]
strs = ["abcde", "apple"]
x = "apcde"
result = 4

[TestCase2]
strs = ["jfshy", "bwbfu", "jfshw"]
x = "jfshw"
result = 16

2. 6과 9로만 이루어진 문자열이 있다.
6과 9는 서로 뒤집을 수 있는데 한 번만 뒤집어야 한다.

666996을 한 번만 뒤집는다는 것은 여러개를 뒤집어도 되지만 띄워서 뒤집을 수는 없다.
 (9)66996   6(99)996 666(66)6 으로는 가능하지만
6(9)69(6)6 (9)6699(9) 로는 불가능하다는 의미이다.

reversals안에 숫자들은 어느 수에서 뒤집힌 수들인지 구하시오.

예를 들어
reversals = ["9966669", "6699669", "9969996", "6969669"]는
"6696669"를 뒤집어서 전부 만들 수 있고
"9969669"를 뒤집어도 전부 만들 수 있다.

이처럼 여러 개의 경우가 있을 때 더 적은 수를 정답으로 구하시오.
단, 정답이 없는 경우는 없으며, 최소한 한번씩은 뒤집어야 한다.

[TestCase1]
reversals = ["9966669", "6699669", "9969996", "6969669"]
result = "6696669"

[TestCase2]
reversals = ["69996", "66966"]
result = "66666"

[TestCase3]
reversals = ["6"]
result = "9"

3. 주사위와 컨베이어벨트가 있다.
cube와 cell에 주사위의 배열과 컨베이어벨트 바닥 번호가 담겨있다.
cube = [5, 1, 2, 3, 4, 6]이라면 이 순서는 정면 기준 : 윗면, 앞면, 옆면(오른쪽), 뒷면, 옆면(왼쪽), 아랫면이고,
cell = [6, 2, 3, 2, 6]이면 첫 칸의 6 위에 주사위가 놓여져 있다.

주사위를 굴려서 바닥의 숫자와 주사위의 숫자가 바닥에서 만나게 하는 것이 목표이다.
할 수 있는 행위는 3가지로

첫째, 왼쪽으로 90도 회전 : [5, 1, 2, 3, 4, 6] -> [5, 2, 3, 4, 1, 6] (자리는 고정)
둘째, 오른쪽으로 90도 회전 : [5, 1, 2, 3, 4, 6] -> [5, 4, 1, 2, 3, 6] (자리는 고정)
셋째, 오른쪽으로 굴리기 : [5, 1, 2, 3, 4, 6] -> [4, 1, 5, 3, 6, 2] (옆 칸으로 이동)

마지막 바닥까지 이동할 때 까지의 최소 횟수를 구하시오.

[TestCase1]
cube = [5, 1, 2, 3, 4, 6]
cell = [6, 2, 3, 2, 6]
result = 9

[TestCase2]
cube = [2, 1, 3, 6, 4, 5]
cell = [5, 1, 5, 1, 2, 3, 2, 6, 4]
result = 18


4. N*M크기의 땅이 있다.
(1, 1)칸에서 출발하여 (N, M)으로 도착하려고 한다.
가는 길은 다리를 놓아서 가야하는데, 다리를 놓기 위해서는 땅을 먼저 구매해야 한다.
최소의 비용으로 도착하여라.

비용은 2가지의 합으로 구성되는데
1. 땅을 구매
2. 다리 건설

땅의 가격은 estate 안에 담겨져 있고
각 estate[i]는 5개의 숫자로 구성되어 있다.
[a, b, c, d, e]일때, (a, b)부터 (c, d)까지의 땅의 가격은 e원이다.

다리의 가격은 한 칸당 k원이 든다.

(1, 1)에서 (N, M)까지의 최소 비용은?

[TestCase1]
N = 5, M = 5, K = 1
estate = [[1, 1, 2, 1, 1], [3, 1, 3, 3, 2], [1, 3, 2, 3, 3], [1, 4, 1, 5, 4], [2, 5, 5, 5, 5], [1, 2, 2, 2, 100], [2, 4, 3, 4, 100], [4, 1, 5, 4, 1000]]
result = 28

[TestCase2]
N = 5, M = 5, K = 100
estate = [[1, 1, 2, 1, 1], [3, 1, 3, 3, 2], [1, 3, 2, 3, 3], [1, 4, 1, 5, 4], [2, 5, 5, 5, 5], [1, 2, 2, 2, 100], [2, 4, 3, 4, 100], [4, 1, 5, 4, 1000]]
result = 1008

[TestCase3]
N = 2, M = 5, K = 3
estate = [[1, 2, 1, 2, 100], [2, 2, 2, 2, 10], [1, 4, 1, 4, 10], [2, 4, 2, 4, 100], [1, 1, 2, 1, 1], [1, 3, 2, 3, 1], [1, 5, 2, 5, 1]]
result = 47